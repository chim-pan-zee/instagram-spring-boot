<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.instagram_spring_boot.Mapper.PostMapper">

 <insert id="insertPost" parameterType="hashmap">
  INSERT INTO post
  VALUES (
    #{postUUID}, 
    (SELECT user_idx FROM person WHERE username = #{username}), 
    #{contents}, 
    DEFAULT
  )
</insert>


    <insert id="insertFiles" parameterType="hashmap">
  INSERT INTO post_file
  VALUES (#{postUUID}, null, #{fileName},null, null )
  </insert>

  <select id="getPostsThumbnail" parameterType="String" resultType="hashmap">
    select pt.post_uuid, ft.file_name, pt.created_at
    from person ut
    join post pt on ut.user_idx = pt.user_idx
    join post_file ft on pt.post_uuid = ft.post_uuid
    where ut.username = #{userId}
    and ft.file_idx = (
    select min(ft2.file_idx)
    from post_file ft2
    where ft2.post_uuid = pt.post_uuid
    );
  </select>

  <select id="getPostContents" parameterType="String" resultType="hashmap">
    select pt.post_uuid, pt.user_idx, ut.username, pt.content, pt.created_at 
    from post pt, person ut 
    where pt.post_uuid = #{postUUID} 
    and ut.user_idx = pt.user_idx
  </select>

  <select id="getPosts" resultType="hashmap" parameterType="int">
  SELECT pt.post_uuid, pt.user_idx, ut.username, pt.content, pt.created_at
  FROM post pt
  JOIN person ut ON ut.user_idx = pt.user_idx
  ORDER BY pt.created_at DESC
  LIMIT 4 OFFSET #{offset};
</select>

  <delete id="deletePost" parameterType="String">
    DELETE FROM post WHERE post_uuid = #{postId};
  </delete>


  <!-- updatePost --> 

  <update id="updatePost" parameterType="String">
  update post set content = #{contents} where post_uuid = #{postUUID} and user_idx = #{userIdx}
  </update>
</mapper>